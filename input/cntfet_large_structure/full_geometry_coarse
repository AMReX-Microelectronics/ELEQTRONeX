#Modified quantities
#GO_h changed from 0.02e-6 to 0.2e-6
#El_h changed from 0.1e-6 to 0.2e-6
#epsilon_GO set to 3.8*epsilon_0
#SV set to -100e-3
#DV set to 0
#GV set to 1V
#grid size
##################################
##### USER DEFINED CONSTANTS #####
##################################
#
### Physical and Other Constants 
my_constants.q = 1.602e-19
my_constants.epsilon_0 = 8.8541878128e-12
my_constants.tiny = 1e-12

### GEOMETRY and MACROSCOPIC PARAMETER PROPERTIES 

#contact metal
my_constants.CM_w = 5e-6
my_constants.CM_l = CM_w
my_constants.CM_h = 2e-6

my_constants.epsilon_CM = 1.7*epsilon_0
my_constants.SV = -100e-3     #source voltage [V]
my_constants.DV = 0           #drain voltage [V]

#gate metal
my_constants.GM_w = 7e-6
my_constants.GM_l = GM_w
my_constants.GM_h = CM_h

my_constants.epsilon_GM = 1.7*epsilon_0  #Aluminum
my_constants.GV = 1              #gate voltage [V]

#gate oxide
my_constants.GO_w = Lx
my_constants.GO_l = GO_w
my_constants.GO_h = 0.2e-6      #smallest dimension that limits n_cell in z.

my_constants.epsilon_GO = 3.8*epsilon_0
 
#carbon nanotube (not actually modeled)
my_constants.CN_l = 0.2e-6
my_constants.CN_cl = 0.04e-6        #dimension that limits n_cell in y.
my_constants.CN_fl = CN_l - 2*CN_cl #0.012e-6

my_constants.charge_CN = 0.
my_constants.charge_density_CN_drainside = charge_CN/(CN_cl*El_h)
my_constants.charge_density_CN_sourceside = 0.

#electrode
my_constants.El_w = 2.e-6
my_constants.El_l = Ly/2. - CM_l/2.
my_constants.El_h = 0.1e-6

my_constants.epsilon_El = 13.*epsilon_0  #Palladium
     
my_constants.El_offset = CN_fl/2. 

#total domain dimensions
my_constants.Lx = 8e-6
my_constants.Ly = 32e-6 
my_constants.Lz = 4e-6 #Lz - CM_h + GO_h + El_h = 1.88e-6 between Xmax and electrode top

my_constants.epsilon_domain = 3.8*epsilon_0 #SiO2


#####################################


#################################
###### GEOMETRY PROPERTIES ######
#################################

#domain.n_cell = 200 800 100
#domain.max_grid_size = 200 800 100
domain.n_cell = 400 800 200
domain.max_grid_size = 400 800 200

domain.prob_lo = -Lx/2. -Ly/2.  0.
domain.prob_hi =  Lx/2.  Ly/2.  Lz

domain.is_periodic = 0 0 0

domain.coord_sys = cartesian 

#################################
###### BOUNDARY CONDITIONS ######
#################################
boundary.hi = neu(0) rob(Ymax) neu(0)
boundary.lo = neu(0) rob(Ymin) rob(Zmin)

boundary.Zmin_a_function  = "0. 
+ 1.   *(y < GM_l/2.)         *(y > -GM_l/2.)        *(x < GM_w/2.)          *(x > -GM_w/2.)
+ 1.   *(y < -Ly/2. + CM_l)   *(y >= -Ly/2.)         *(x < CM_w/2.)          *(x > -CM_w/2.)
+ 1.   *(y <= Ly/2.)          *(y > Ly/2. - CM_l)    *(x < CM_w/2.)          *(x > -CM_w/2.)"

boundary.Zmin_b_function  = "1.
+ (0. - 1)   *(y < GM_l/2.)         *(y > -GM_l/2.)        *(x < GM_w/2.)          *(x > -GM_w/2.)
+ (0. - 1)   *(y < -Ly/2. + CM_l)   *(y >= -Ly/2.)         *(x < CM_w/2.)          *(x > -CM_w/2.)
+ (0. - 1)   *(y <= Ly/2.)          *(y > Ly/2. - CM_l)    *(x < CM_w/2.)          *(x > -CM_w/2.)"

boundary.Zmin_f_function  = "0.
+ GV  *(y < GM_l/2.)         *(y > -GM_l/2.)        *(x < GM_w/2.)          *(x > -GM_w/2.)
+ SV  *(y < -Ly/2. + CM_l)   *(y >= -Ly/2.)         *(x < CM_w/2.)          *(x > -CM_w/2.)
+ DV  *(y <= Ly/2.)          *(y > Ly/2. - CM_l)    *(x < CM_w/2.)          *(x > -CM_w/2.)"

boundary.Ymin_a_function  = "0.
+ 1. *(x < CM_w/2.)          *(x > -CM_w/2.)        *(z >= 0)           *(z < CM_h)"

boundary.Ymin_b_function  = "1.
+ (0. - 1) *(x < CM_w/2.)          *(x > -CM_w/2.)        *(z >= 0)           *(z < CM_h)"

boundary.Ymin_f_function  = "0.
+ SV *(x < CM_w/2.)          *(x > -CM_w/2.)        *(z >= 0)           *(z < CM_h)"
 
boundary.Ymax_a_function  = "0.
+ 1. *(x < CM_w/2.)          *(x > -CM_w/2.)        *(z >= 0)           *(z < CM_h)"

boundary.Ymax_b_function  = "1.
+ (0. - 1) *(x < CM_w/2.)          *(x > -CM_w/2.)        *(z >= 0)           *(z < CM_h)"

boundary.Ymax_f_function  = "0.
+ DV *(x < CM_w/2.)          *(x > -CM_w/2.)        *(z >= 0)           *(z < CM_h)"
####################################
###### MACROSCOPIC PROPERTIES ######
####################################
macroscopic.fields_to_define = alpha epsilon charge_density phi robinA robinB robinF
macroscopic.ghostcells_for_fields = alpha.0 epsilon.1 charge_density.0 phi.1 robinA.1 robinB.1 robinF.1

macroscopic.alpha = 0.
macroscopic.epsilon_function  = "epsilon_domain
+ (epsilon_GM - epsilon_domain) *(y < GM_l/2.)         *(y > -GM_l/2.)        *(x < GM_w/2.)           *(x >  -GM_w/2.)          *(z >= 0)           *(z < GM_h)                    
+ (epsilon_GO - epsilon_domain) *(y < GO_l/2.)         *(y > -GO_l/2.)        *(x < GO_w/2.)           *(x >  -GO_w/2.)          *(z >= GM_h)        *(z < GM_h + GO_h) 
+ (epsilon_CM - epsilon_domain) *(y < -Ly/2. + CM_l)   *(y >= -Ly/2.)         *(x < CM_w/2.)           *(x >  -CM_w/2.)          *(z >= 0)           *(z < CM_h)                    
+ (epsilon_CM - epsilon_domain) *(y <= Ly/2.)          *(y > Ly/2. - CM_l)    *(x < CM_w/2.)           *(x >  -CM_w/2.)          *(z >= 0)           *(z < CM_h)                    
+ (epsilon_El - epsilon_domain) *(y <= 0)              *(y > -GO_l/2. - El_h) *(x < El_offset + El_w)  *(x >=  El_offset)        *(z >= GM_h + GO_h) *(z < GM_h + GO_h + El_h) 
+ (epsilon_El - epsilon_domain) *(y <= -GO_l/2. )      *(y > -GO_l/2. - El_h) *(x < El_offset + El_w)  *(x >=  El_offset)        *(z >= GM_h )       *(z < GM_h + GO_h)              
+ (epsilon_El - epsilon_domain) *(y <= -GO_l/2. -El_h) *(y > -El_l)           *(x < El_offset + El_w)  *(x >=  El_offset)        *(z >= GM_h)        *(z < GM_h + El_h)
+ (epsilon_El - epsilon_domain) *(y <   GO_l/2. +El_h) *(y >= 0)              *(x <= -El_offset)       *(x > -El_offset- El_w)   *(z >= GM_h + GO_h) *(z < GM_h + GO_h + El_h)                    
+ (epsilon_El - epsilon_domain) *(y <   GO_l/2. +El_h) *(y >= GO_l/2.)        *(x <= -El_offset)       *(x > -El_offset- El_w)   *(z >= GM_h )       *(z < GM_h + GO_h)                    
+ (epsilon_El - epsilon_domain) *(y <   El_l)          *(y >= GO_l/2. + El_h) *(x <= -El_offset)       *(x > -El_offset- El_w)   *(z >= GM_h)        *(z < GM_h + El_h)
"
 
macroscopic.charge_density_function  = "0. 
+ charge_density_CN_sourceside   * (y <= 0)    * (y > -tiny) * (x <= El_offset + CN_cl) * (x >   El_offset)        * (z >= GM_h + GO_h) * (z < GM_h + GO_h + El_h)
+ charge_density_CN_drainside    * (y <  tiny) * (y >= 0)    * (x < -El_offset)         * (x >= -El_offset -CN_cl) * (z >= GM_h + GO_h) * (z < GM_h + GO_h + El_h)"

macroscopic.phi = 0.
macroscopic.robinA = 0.
macroscopic.robinB = 0.
macroscopic.robinF = 0.

####################################
###### MLMG SOLVER PROPERTIES ######
####################################
mlmg.ascalar=0
mlmg.bscalar=1

mlmg.soln   = phi
mlmg.rhs    = charge_density
mlmg.alpha  = alpha
mlmg.beta   = epsilon
mlmg.robin_a   = robinA 
mlmg.robin_b   = robinB
mlmg.robin_f   = robinF

mlmg.set_verbose=0
mlmg.max_order=2
mlmg.absolute_tolerance=0
mlmg.relative_tolerance=1e-10

#############################
###### POST PROCESSING ######
#############################
#post_process.fields_to_process = vecField 

####################
###### OUTPUT ######
####################
plot.folder_name = cntfetLarge3d
plot.fields_to_plot = epsilon.1 charge_density phi.1 robinA.2 robinB.2 robinF.2 
plot.write_after_init = 1 
